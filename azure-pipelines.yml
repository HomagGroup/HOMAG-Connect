# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml


trigger:
  tags:
    include:
    - '*'

variables:
  dotnetVersion: 6.0.x

stages:
  - stage: Build
    pool:
      vmImage: 'ubuntu-22.04'
    variables:
      BuildConfiguration: Release
    jobs:
      - job: Build
        steps:

        - checkout: self
          fetchDepth: 0

        - task: PowerShell@2
          displayName: Set version environment variable
          inputs:
            targetType: inline
            script: |
              git log
              $VERSION_TAG = git describe --tags --dirty --match='v[0-9]*'
              echo "Set version tag: $($VERSION_TAG)"
              echo "##vso[task.setvariable variable=VERSION_TAG]$($VERSION_TAG)"

        - task: UseDotNet@2
          displayName: 'Use .NET Core sdk $(dotnetVersion)'
          inputs:
            packageType: 'sdk'
            version: $(dotnetVersion)

        - task: DotNetCoreCLI@2
          displayName: Restore packages
          inputs:
            command: 'restore'

        - task: SonarQubePrepare@4
          displayName: 'Prepare analysis on SonarQube'
          inputs:
            SonarQube: 'SonarQube Enterprise'
            projectKey: $(ProductName).$(ProjectName)
            projectName: $(ProductName).$(ProjectName)
            projectVersion: '$(MajorMinorBuildVersion)'
            extraProperties: |
                sonar.cs.vstest.reportsPaths=$(Agent.TempDirectory)/**/*.trx
            condition: and(succeeded(), eq(variables.disableSonarQubeAnalysis, false))

        - task: DotNetCoreCLI@2
          displayName: Build projects
          inputs:
            command: 'build'
            projects: '**/*.csproj'
            arguments: '--configuration $(BuildConfiguration) --no-restore -nr:FALSE'

        - task: DotNetCoreCLI@2
          displayName: Run Unit Tests
          inputs:
            command: 'test'
            arguments: '--configuration $(BuildConfiguration) --no-restore --no-build --filter TestCategory!=UserTestNoInteractionNeeded&TestCategory!=UserTestInteractionNeeded'
        
        - task: SonarQubeAnalyze@4
          displayName: 'Run Code Analysis'
          condition: and(succeeded(), eq(variables.disableSonarQubeAnalysis, false))

        - task: SonarQubePublish@4
          displayName: 'Publish Quality Gate Result'
          continueOnError: true
          condition: and(succeeded(), eq(variables.disableSonarQubeAnalysis, false))

        - script: dotnet nuget push --source https://api.nuget.org/v3/index.json --api-key $(API_KEY_MMR_MOBILE) Applications/HomagConnect.MMR Mobile/Client/HomagConnect.MmrMobile.Client/**/*.nupkg
          displayName: "Publish HomagConnect MmrMobile NuGet package on nuget.org"
          condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/'), eq(variables['Build.Repository.Name'], 'homag-connect'))
