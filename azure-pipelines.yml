# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml


trigger:
  branches:
    include:
    - '*'
  tags:
    include:
    - '*'

variables:
  dotnetVersion: 7.0.x
  ProductName: HomagGroup.DigitalFactory.DigitalDevelopment
  ProjectName: HomagConnect


stages:
  - stage: Build
    pool:
      vmImage: 'ubuntu-22.04'
    variables:
      BuildConfiguration: Release
    jobs:
      - job: Build
           
        steps:
        - checkout: self
          fetchDepth: 0         
        
        - script: echo "Build branch is $(Build.SourceBranch)" 
          displayName: Set version environment variable    
    

        - task: PowerShell@2
          displayName: Set version environment variable
          inputs:
            targetType: inline
            script: |
              git log
              $VERSION_TAG = git describe --tags --dirty --match='[0-9]*'
              echo "Set version tag: $($VERSION_TAG)"
              echo "##vso[task.setvariable variable=VERSION_TAG]$($VERSION_TAG)"      

        - task: UseDotNet@2
          displayName: 'Use .NET Core sdk $(dotnetVersion)'
          inputs:
            packageType: 'sdk'
            version: $(dotnetVersion)

        - task: DotNetCoreCLI@2
          displayName: Restore packages
          inputs:
            command: 'restore'

        - task: SonarQubePrepare@5
          displayName: 'Prepare analysis on SonarQube'
          inputs:
            SonarQube: 'SonarQube Enterprise'
            projectKey: $(ProductName).$(ProjectName)
            projectName: $(ProductName).$(ProjectName)
            projectVersion: '$(MajorMinorBuildVersion)'
            extraProperties: |
                sonar.cs.vstest.reportsPaths=$(Agent.TempDirectory)/**/*.trx
            condition: and(succeeded(), eq(variables.disableSonarQubeAnalysis, false))

        - task: DotNetCoreCLI@2
          displayName: Build projects
          inputs:
            command: 'build'
            projects: '**/*.csproj'
            arguments: '--configuration $(BuildConfiguration) --no-restore -nr:FALSE'

        - task: DotNetCoreCLI@2
          displayName: Run Integration Tests in DEV environment.   
          env:
            HomagConnect:BaseUrl: $(HomagConnect:BaseUrl:DEV)
            HomagConnect:SubscriptionId: $(HomagConnect:IntelliDivide:SubscriptionId)
            HomagConnect:Token: $(HomagConnect:IntelliDivide:Token)
          inputs:
            command: 'test'
            arguments: '--configuration $(BuildConfiguration) --no-restore --no-build --filter TestCategory!=TemporaryDisabled&TestCategory!=UserTestInteractionNeeded'                        
        
        - task: SonarQubeAnalyze@5
          displayName: 'Run Code Analysis'
          condition: and(succeeded(), eq(variables.disableSonarQubeAnalysis, false))

        - task: SonarQubePublish@5
          displayName: 'Publish Quality Gate Result'
          continueOnError: true
          condition: and(succeeded(), eq(variables.disableSonarQubeAnalysis, false))          

        - script: dotnet nuget push --source https://api.nuget.org/v3/index.json --api-key $(NUGET_API_KEY) "Base/HomagConnect.Base.Contracts/**/*.nupkg"
          displayName: "Publish HomagConnect Base Contracts NuGet package on nuget.org"     
          condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/heads/feature/287417'))     

        - script: dotnet nuget push --source https://api.nuget.org/v3/index.json --api-key $(NUGET_API_KEY) "Base/HomagConnect.Base/**/*.nupkg" 
          displayName: "Publish HomagConnect Base NuGet package on nuget.org"                        
          condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/heads/feature/287081'))     

        - script: dotnet nuget push --source https://api.nuget.org/v3/index.json --api-key $(API_KEY_MMR_MOBILE) "Applications/MmrMobile/Client/**/*.nupkg"
          displayName: "Publish HomagConnect MmrMobile NuGet package on nuget.org"          
          condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/heads/feature/287081'))     
             
        - script: dotnet nuget push --source https://api.nuget.org/v3/index.json --api-key $(NUGET_API_KEY) "Applications/IntelliDivide/Contracts/**/*.nupkg"
          displayName: "Publish HomagConnect IntelliDivide Contract NuGet package on nuget.org"     
          condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/heads/feature/287081'))     
          
        - script: dotnet nuget push --source https://api.nuget.org/v3/index.json --api-key $(NUGET_API_KEY) "Applications/IntelliDivide/Client/**/*.nupkg"
          displayName: "Publish HomagConnect IntelliDivide Client NuGet package on nuget.org"            
          condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/heads/feature/287081'))     

        - script: dotnet nuget push --source https://api.nuget.org/v3/index.json --api-key $(NUGET_API_KEY) "Applications/IntelliDivide/Samples/**/*.nupkg"
          displayName: "Publish HomagConnect IntelliDivide Client Samples package on nuget.org"
          condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/heads/feature/287081'))     

        - script: dotnet nuget push --source https://api.nuget.org/v3/index.json --api-key $(NUGET_API_KEY) "Applications/MaterialManager/Contracts/**/*.nupkg"
          displayName: "Publish HomagConnect MaterialManager Contracts package on nuget.org"
          condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/heads/feature/287081'))     

        - script: dotnet nuget push --source https://api.nuget.org/v3/index.json --api-key $(NUGET_API_KEY) "Applications/MaterialManager/Client/**/*.nupkg"
          displayName: "Publish HomagConnect MaterialManager Client package on nuget.org"
          condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/heads/feature/287081'))     
        
        




        
       
